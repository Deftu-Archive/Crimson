/*
 * Requisite - Minecraft library mod
 * Copyright (C) 2021 MatthewTGM
 *
 * Requisite is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * Requisite is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Requisite. If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "org.jetbrains.kotlin.jvm" version "1.5.21"
    id "java"
}

archivesBaseName = mod_name
version = mod_ver
group = mod_group

sourceCompatibility = targetCompatibility = 1.8

/* Add available repositories to areas where dependencies can be downloaded. */
repositories {
    mavenCentral()
    maven {
        name = "Sk1er Public"
        url = "https://repo.sk1er.club/repository/maven-public/"
    }
    maven {
        name = "SpongePowered"
        url = "https://repo.spongepowered.org/maven/"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io/"
    }
}

/* Adds a configuration for shading libraries. */
configurations {
    shade
    implementation.extendsFrom(shade)
}

/* Define dependencies. */
dependencies {
    /* Requisite dependencies. */
    shade('xyz.matthewtgm:SimpleEventBus:2.0.1')
    shade('xyz.matthewtgm:TGMConfig:3.2.0')
    shade('xyz.matthewtgm:JsonTGM:2.10.0')
    shade('xyz.matthewtgm:Mango:1.2.0')

    shade('org.java-websocket:Java-WebSocket:1.5.2')

    shade('org.spongepowered:mixin:0.7.11-SNAPSHOT')
    annotationProcessor('org.spongepowered:mixin:0.7.11-SNAPSHOT')

    /* Dependencies for cutting other mods' file sizes. */
    shade('com.github.marcoacierno:pastebin-java-api:v0.2.1')
    shade('com.squareup.okhttp3:okhttp:4.9.1')
    shade('org.kohsuke:github-api:1.132')

    shade('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1-native-mt')
    shade('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    shade('org.jetbrains.kotlin:kotlin-reflect')
}

/* Set the duplicatesStrategy and define configs. */
jar {
    enabled = false
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest.attributes(
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'MixinConfigs': 'mixins.requisite.json',
            'FMLCorePluginContainsFMLMod': true,
            'ForceLoadAsMod': true,
            'ModSide': 'CLIENT',
            'TweakOrder': 0
    )
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

/* Makes the shade configuration work and re-define the duplicatesStrategy. */
shadowJar {
    configurations = [project.configurations.shade]
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    relocate('com.besaba.revonline', mod_shaded + 'besaba.revonline')
    relocate('okio', mod_shaded + 'okio')
    relocate('okhttp3', mod_shaded + 'okhttp3')
    relocate('org.java_websocket', mod_shaded + 'websocket')

    exclude('LICENSE.md')
    exclude('pack.mcmeta')
    exclude('dummyThing')
    exclude('**/module-info.class')
    exclude('*.so')
    exclude('*.dylib')
    exclude('*.dll')
    exclude('*.jnilib')
    exclude('ibxm/**')
    exclude('com/jcraft/**')
    exclude('org/lwjgl/**')
    exclude('net/java/**')

    exclude('META-INF/proguard/**')
    exclude('META-INF/maven/**')
    exclude('META-INF/versions/**')
    exclude('META-INF/com.android.tools/**')
    
    exclude('**/*.kotlin_metadata')
    exclude('**/*.kotlin_module')
    exclude('**/*.kotlin_builtins')

    archiveClassifier.set('')
}

/* Move the resources to the working directory for runs. */
task moveResources {
    doLast {
        try {
            ant.move file: "${buildDir}/resources/main",
                    todir: "${buildDir}/classes/java"
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}







subprojects {
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "java"

    ext {
        minecraft_version = ""
        minecraft_platform = ""

        elementa_mcversion_override = ""
        elementa_version_override = ""
    }

    repositories {
        mavenCentral()
        maven {
            name = "Sk1er Public"
            url = "https://repo.sk1er.club/repository/maven-public"
        }
        maven {
            name = "SpongePowered"
            url = 'https://repo.spongepowered.org/maven/'
        }
        maven {
            name = "JitPack"
            url = 'https://jitpack.io/'
        }
    }

    afterEvaluate {
        dependencies {
            implementation('xyz.matthewtgm:SimpleEventBus:2.0.1')
            implementation('xyz.matthewtgm:TGMConfig:3.2.0')
            implementation('xyz.matthewtgm:JsonTGM:2.10.0')
            implementation('xyz.matthewtgm:Mango:1.2.0')

            implementation('org.java-websocket:Java-WebSocket:1.5.2')

            implementation("gg.essential:elementa-${elementa_mcversion_override.isEmpty() ? minecraft_version : elementa_mcversion_override}-${minecraft_platform}:${elementa_version_override.isEmpty() ? "358+next" : elementa_version_override}")

            implementation('org.spongepowered:mixin:0.7.11-SNAPSHOT')
            annotationProcessor('org.spongepowered:mixin:0.7.11-SNAPSHOT')

            /* Dependencies for cutting other mods' file sizes. */
            implementation('com.github.marcoacierno:pastebin-java-api:v0.2.1')
            implementation('com.squareup.okhttp3:okhttp:4.9.1')
            implementation('org.kohsuke:github-api:1.132')

            implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1-native-mt')
            implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
            implementation('org.jetbrains.kotlin:kotlin-reflect')
        }
    }
}

moveResources.dependsOn(processResources)
classes.dependsOn(moveResources)
jar.finalizedBy(shadowJar)
